{"ast":null,"code":"var _jsxFileName = \"/Users/stev/Desktop/Personal-Website/react_front/src/context/SettingsContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useMemo, useEffect } from 'react';\nimport { ThemeProvider, createTheme, CssBaseline } from '@mui/material';\n\n// 创建 Settings 上下文\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SettingsContext = /*#__PURE__*/createContext();\nexport const SettingsProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  // 语言状态\n  const [language, setLanguage] = useState('en'); // 默认语言为英文\n  // 主题模式状态\n  const [themeMode, setThemeMode] = useState('light'); // 默认主题为浅色模式\n\n  // 检测系统语言\n  useEffect(() => {\n    const systemLanguage = navigator.language.startsWith('zh') ? 'cn' : 'en'; // 检测是否是中文环境\n    setLanguage(systemLanguage);\n  }, []);\n\n  // 检测系统主题\n  useEffect(() => {\n    const darkModeMediaQuery = window.matchMedia('(prefers-color-scheme: dark)'); // 检测系统是否为暗色模式\n    const systemThemeMode = darkModeMediaQuery.matches ? 'dark' : 'light';\n    setThemeMode(systemThemeMode);\n\n    // 监听系统主题变化\n    const handleChange = e => {\n      setThemeMode(e.matches ? 'dark' : 'light');\n    };\n    darkModeMediaQuery.addEventListener('change', handleChange);\n\n    // 清除事件监听\n    return () => {\n      darkModeMediaQuery.removeEventListener('change', handleChange);\n    };\n  }, []);\n\n  // 切换语言\n  const toggleLanguage = () => setLanguage(language === 'en' ? 'cn' : 'en');\n  // 切换主题模式\n  const toggleTheme = () => setThemeMode(themeMode === 'light' ? 'dark' : 'light');\n\n  // 动态创建 Material-UI 主题\n  const theme = useMemo(() => createTheme({\n    palette: {\n      mode: themeMode // 应用当前主题模式\n    }\n  }), [themeMode]);\n  return /*#__PURE__*/_jsxDEV(SettingsContext.Provider, {\n    value: {\n      language,\n      themeMode,\n      toggleLanguage,\n      toggleTheme\n    },\n    children: /*#__PURE__*/_jsxDEV(ThemeProvider, {\n      theme: theme,\n      children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), children]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(SettingsProvider, \"YoEyZBMco6nkg183g0gs9ZgFMpw=\");\n_c = SettingsProvider;\nvar _c;\n$RefreshReg$(_c, \"SettingsProvider\");","map":{"version":3,"names":["React","createContext","useState","useMemo","useEffect","ThemeProvider","createTheme","CssBaseline","jsxDEV","_jsxDEV","SettingsContext","SettingsProvider","_ref","_s","children","language","setLanguage","themeMode","setThemeMode","systemLanguage","navigator","startsWith","darkModeMediaQuery","window","matchMedia","systemThemeMode","matches","handleChange","e","addEventListener","removeEventListener","toggleLanguage","toggleTheme","theme","palette","mode","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/stev/Desktop/Personal-Website/react_front/src/context/SettingsContext.js"],"sourcesContent":["import React, { createContext, useState, useMemo, useEffect } from 'react';\nimport { ThemeProvider, createTheme, CssBaseline } from '@mui/material';\n\n// 创建 Settings 上下文\nexport const SettingsContext = createContext();\n\nexport const SettingsProvider = ({ children }) => {\n  // 语言状态\n  const [language, setLanguage] = useState('en'); // 默认语言为英文\n  // 主题模式状态\n  const [themeMode, setThemeMode] = useState('light'); // 默认主题为浅色模式\n\n  // 检测系统语言\n  useEffect(() => {\n    const systemLanguage = navigator.language.startsWith('zh') ? 'cn' : 'en'; // 检测是否是中文环境\n    setLanguage(systemLanguage);\n  }, []);\n\n  // 检测系统主题\n  useEffect(() => {\n    const darkModeMediaQuery = window.matchMedia('(prefers-color-scheme: dark)'); // 检测系统是否为暗色模式\n    const systemThemeMode = darkModeMediaQuery.matches ? 'dark' : 'light';\n    setThemeMode(systemThemeMode);\n\n    // 监听系统主题变化\n    const handleChange = (e) => {\n      setThemeMode(e.matches ? 'dark' : 'light');\n    };\n    darkModeMediaQuery.addEventListener('change', handleChange);\n\n    // 清除事件监听\n    return () => {\n      darkModeMediaQuery.removeEventListener('change', handleChange);\n    };\n  }, []);\n\n  // 切换语言\n  const toggleLanguage = () => setLanguage(language === 'en' ? 'cn' : 'en');\n  // 切换主题模式\n  const toggleTheme = () => setThemeMode(themeMode === 'light' ? 'dark' : 'light');\n\n  // 动态创建 Material-UI 主题\n  const theme = useMemo(\n    () =>\n      createTheme({\n        palette: {\n          mode: themeMode, // 应用当前主题模式\n        },\n      }),\n    [themeMode]\n  );\n\n  return (\n    <SettingsContext.Provider value={{ language, themeMode, toggleLanguage, toggleTheme }}>\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        {children}\n      </ThemeProvider>\n    </SettingsContext.Provider>\n  );\n};\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,OAAO,EAAEC,SAAS,QAAQ,OAAO;AAC1E,SAASC,aAAa,EAAEC,WAAW,EAAEC,WAAW,QAAQ,eAAe;;AAEvE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,eAAe,gBAAGT,aAAa,CAAC,CAAC;AAE9C,OAAO,MAAMU,gBAAgB,GAAGC,IAAA,IAAkB;EAAAC,EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC,GAAAF,IAAA;EAC3C;EACA,MAAM,CAACG,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAChD;EACA,MAAM,CAACe,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;;EAErD;EACAE,SAAS,CAAC,MAAM;IACd,MAAMe,cAAc,GAAGC,SAAS,CAACL,QAAQ,CAACM,UAAU,CAAC,IAAI,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC;IAC1EL,WAAW,CAACG,cAAc,CAAC;EAC7B,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAf,SAAS,CAAC,MAAM;IACd,MAAMkB,kBAAkB,GAAGC,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAAC,CAAC;IAC9E,MAAMC,eAAe,GAAGH,kBAAkB,CAACI,OAAO,GAAG,MAAM,GAAG,OAAO;IACrER,YAAY,CAACO,eAAe,CAAC;;IAE7B;IACA,MAAME,YAAY,GAAIC,CAAC,IAAK;MAC1BV,YAAY,CAACU,CAAC,CAACF,OAAO,GAAG,MAAM,GAAG,OAAO,CAAC;IAC5C,CAAC;IACDJ,kBAAkB,CAACO,gBAAgB,CAAC,QAAQ,EAAEF,YAAY,CAAC;;IAE3D;IACA,OAAO,MAAM;MACXL,kBAAkB,CAACQ,mBAAmB,CAAC,QAAQ,EAAEH,YAAY,CAAC;IAChE,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMI,cAAc,GAAGA,CAAA,KAAMf,WAAW,CAACD,QAAQ,KAAK,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC;EACzE;EACA,MAAMiB,WAAW,GAAGA,CAAA,KAAMd,YAAY,CAACD,SAAS,KAAK,OAAO,GAAG,MAAM,GAAG,OAAO,CAAC;;EAEhF;EACA,MAAMgB,KAAK,GAAG9B,OAAO,CACnB,MACEG,WAAW,CAAC;IACV4B,OAAO,EAAE;MACPC,IAAI,EAAElB,SAAS,CAAE;IACnB;EACF,CAAC,CAAC,EACJ,CAACA,SAAS,CACZ,CAAC;EAED,oBACER,OAAA,CAACC,eAAe,CAAC0B,QAAQ;IAACC,KAAK,EAAE;MAAEtB,QAAQ;MAAEE,SAAS;MAAEc,cAAc;MAAEC;IAAY,CAAE;IAAAlB,QAAA,eACpFL,OAAA,CAACJ,aAAa;MAAC4B,KAAK,EAAEA,KAAM;MAAAnB,QAAA,gBAC1BL,OAAA,CAACF,WAAW;QAAA+B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EACd3B,QAAQ;IAAA;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACQ,CAAC;AAE/B,CAAC;AAAC5B,EAAA,CAtDWF,gBAAgB;AAAA+B,EAAA,GAAhB/B,gBAAgB;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}