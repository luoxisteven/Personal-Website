{"ast":null,"code":"import React,{createContext,useState,useMemo,useEffect}from'react';import{ThemeProvider,createTheme,CssBaseline}from'@mui/material';// 创建 Settings 上下文\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export const SettingsContext=/*#__PURE__*/createContext();export const SettingsProvider=_ref=>{let{children}=_ref;// 语言状态\nconst[language,setLanguage]=useState('en');// 默认语言为英文\n// 主题模式状态\nconst[themeMode,setThemeMode]=useState('light');// 默认主题为浅色模式\n// 检测系统语言\nuseEffect(()=>{const systemLanguage=navigator.language.startsWith('zh')?'cn':'en';// 检测是否是中文环境\nsetLanguage(systemLanguage);},[]);// 检测系统主题\nuseEffect(()=>{const darkModeMediaQuery=window.matchMedia('(prefers-color-scheme: dark)');// 检测系统是否为暗色模式\nconst systemThemeMode=darkModeMediaQuery.matches?'dark':'light';setThemeMode(systemThemeMode);// 监听系统主题变化\nconst handleChange=e=>{setThemeMode(e.matches?'dark':'light');};darkModeMediaQuery.addEventListener('change',handleChange);// 清除事件监听\nreturn()=>{darkModeMediaQuery.removeEventListener('change',handleChange);};},[]);// 切换语言\nconst toggleLanguage=()=>setLanguage(language==='en'?'cn':'en');// 切换主题模式\nconst toggleTheme=()=>setThemeMode(themeMode==='light'?'dark':'light');// 动态创建 Material-UI 主题\nconst theme=useMemo(()=>createTheme({palette:{mode:themeMode// 应用当前主题模式\n}}),[themeMode]);return/*#__PURE__*/_jsx(SettingsContext.Provider,{value:{language,themeMode,toggleLanguage,toggleTheme},children:/*#__PURE__*/_jsxs(ThemeProvider,{theme:theme,children:[/*#__PURE__*/_jsx(CssBaseline,{}),children]})});};","map":{"version":3,"names":["React","createContext","useState","useMemo","useEffect","ThemeProvider","createTheme","CssBaseline","jsx","_jsx","jsxs","_jsxs","SettingsContext","SettingsProvider","_ref","children","language","setLanguage","themeMode","setThemeMode","systemLanguage","navigator","startsWith","darkModeMediaQuery","window","matchMedia","systemThemeMode","matches","handleChange","e","addEventListener","removeEventListener","toggleLanguage","toggleTheme","theme","palette","mode","Provider","value"],"sources":["/Users/stev/Desktop/Personal-Website/react_front/src/context/SettingsContext.js"],"sourcesContent":["import React, { createContext, useState, useMemo, useEffect } from 'react';\nimport { ThemeProvider, createTheme, CssBaseline } from '@mui/material';\n\n// 创建 Settings 上下文\nexport const SettingsContext = createContext();\n\nexport const SettingsProvider = ({ children }) => {\n  // 语言状态\n  const [language, setLanguage] = useState('en'); // 默认语言为英文\n  // 主题模式状态\n  const [themeMode, setThemeMode] = useState('light'); // 默认主题为浅色模式\n\n  // 检测系统语言\n  useEffect(() => {\n    const systemLanguage = navigator.language.startsWith('zh') ? 'cn' : 'en'; // 检测是否是中文环境\n    setLanguage(systemLanguage);\n  }, []);\n\n  // 检测系统主题\n  useEffect(() => {\n    const darkModeMediaQuery = window.matchMedia('(prefers-color-scheme: dark)'); // 检测系统是否为暗色模式\n    const systemThemeMode = darkModeMediaQuery.matches ? 'dark' : 'light';\n    setThemeMode(systemThemeMode);\n\n    // 监听系统主题变化\n    const handleChange = (e) => {\n      setThemeMode(e.matches ? 'dark' : 'light');\n    };\n    darkModeMediaQuery.addEventListener('change', handleChange);\n\n    // 清除事件监听\n    return () => {\n      darkModeMediaQuery.removeEventListener('change', handleChange);\n    };\n  }, []);\n\n  // 切换语言\n  const toggleLanguage = () => setLanguage(language === 'en' ? 'cn' : 'en');\n  // 切换主题模式\n  const toggleTheme = () => setThemeMode(themeMode === 'light' ? 'dark' : 'light');\n\n  // 动态创建 Material-UI 主题\n  const theme = useMemo(\n    () =>\n      createTheme({\n        palette: {\n          mode: themeMode, // 应用当前主题模式\n        },\n      }),\n    [themeMode]\n  );\n\n  return (\n    <SettingsContext.Provider value={{ language, themeMode, toggleLanguage, toggleTheme }}>\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        {children}\n      </ThemeProvider>\n    </SettingsContext.Provider>\n  );\n};\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,QAAQ,CAAEC,OAAO,CAAEC,SAAS,KAAQ,OAAO,CAC1E,OAASC,aAAa,CAAEC,WAAW,CAAEC,WAAW,KAAQ,eAAe,CAEvE;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBACA,MAAO,MAAM,CAAAC,eAAe,cAAGX,aAAa,CAAC,CAAC,CAE9C,MAAO,MAAM,CAAAY,gBAAgB,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAC3C;AACA,KAAM,CAACE,QAAQ,CAAEC,WAAW,CAAC,CAAGf,QAAQ,CAAC,IAAI,CAAC,CAAE;AAChD;AACA,KAAM,CAACgB,SAAS,CAAEC,YAAY,CAAC,CAAGjB,QAAQ,CAAC,OAAO,CAAC,CAAE;AAErD;AACAE,SAAS,CAAC,IAAM,CACd,KAAM,CAAAgB,cAAc,CAAGC,SAAS,CAACL,QAAQ,CAACM,UAAU,CAAC,IAAI,CAAC,CAAG,IAAI,CAAG,IAAI,CAAE;AAC1EL,WAAW,CAACG,cAAc,CAAC,CAC7B,CAAC,CAAE,EAAE,CAAC,CAEN;AACAhB,SAAS,CAAC,IAAM,CACd,KAAM,CAAAmB,kBAAkB,CAAGC,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAAE;AAC9E,KAAM,CAAAC,eAAe,CAAGH,kBAAkB,CAACI,OAAO,CAAG,MAAM,CAAG,OAAO,CACrER,YAAY,CAACO,eAAe,CAAC,CAE7B;AACA,KAAM,CAAAE,YAAY,CAAIC,CAAC,EAAK,CAC1BV,YAAY,CAACU,CAAC,CAACF,OAAO,CAAG,MAAM,CAAG,OAAO,CAAC,CAC5C,CAAC,CACDJ,kBAAkB,CAACO,gBAAgB,CAAC,QAAQ,CAAEF,YAAY,CAAC,CAE3D;AACA,MAAO,IAAM,CACXL,kBAAkB,CAACQ,mBAAmB,CAAC,QAAQ,CAAEH,YAAY,CAAC,CAChE,CAAC,CACH,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAAI,cAAc,CAAGA,CAAA,GAAMf,WAAW,CAACD,QAAQ,GAAK,IAAI,CAAG,IAAI,CAAG,IAAI,CAAC,CACzE;AACA,KAAM,CAAAiB,WAAW,CAAGA,CAAA,GAAMd,YAAY,CAACD,SAAS,GAAK,OAAO,CAAG,MAAM,CAAG,OAAO,CAAC,CAEhF;AACA,KAAM,CAAAgB,KAAK,CAAG/B,OAAO,CACnB,IACEG,WAAW,CAAC,CACV6B,OAAO,CAAE,CACPC,IAAI,CAAElB,SAAW;AACnB,CACF,CAAC,CAAC,CACJ,CAACA,SAAS,CACZ,CAAC,CAED,mBACET,IAAA,CAACG,eAAe,CAACyB,QAAQ,EAACC,KAAK,CAAE,CAAEtB,QAAQ,CAAEE,SAAS,CAAEc,cAAc,CAAEC,WAAY,CAAE,CAAAlB,QAAA,cACpFJ,KAAA,CAACN,aAAa,EAAC6B,KAAK,CAAEA,KAAM,CAAAnB,QAAA,eAC1BN,IAAA,CAACF,WAAW,GAAE,CAAC,CACdQ,QAAQ,EACI,CAAC,CACQ,CAAC,CAE/B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}